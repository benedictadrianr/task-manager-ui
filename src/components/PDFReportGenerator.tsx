"use client";

import { useState } from "react";
import { useTaskContext } from "@/contexts/TaskContext";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Download, FileText, CheckCircle2, AlertCircle } from "lucide-react";
import { format } from "date-fns";

export default function PDFReportGenerator() {
  const { tasks } = useTaskContext();
  const [isGenerating, setIsGenerating] = useState(false);
  const [status, setStatus] = useState<"success" | "error" | null>(null);

  const generatePDFContent = () => {
    const timestamp = format(new Date(), "MMMM dd, yyyy 'at' h:mm a");
    const completedTasks = tasks.filter((task) => task.completed);
    const pendingTasks = tasks.filter((task) => !task.completed);

    return `
Task Management Dashboard Report
Generated on: ${timestamp}

SUMMARY
=======
Total Tasks: ${tasks.length}
Completed Tasks: ${completedTasks.length}
Pending Tasks: ${pendingTasks.length}
Completion Rate: ${
      tasks.length > 0
        ? Math.round((completedTasks.length / tasks.length) * 100)
        : 0
    }%

PENDING TASKS
=============
${
  pendingTasks.length > 0
    ? pendingTasks
        .map(
          (task, index) => `
${index + 1}. ${task.title}
   Description: ${task.description || "No description provided"}
   Created: ${format(task.createdAt, "MMM dd, yyyy")}
   Status: Pending
`
        )
        .join("\n")
    : "No pending tasks"
}

COMPLETED TASKS
===============
${
  completedTasks.length > 0
    ? completedTasks
        .map(
          (task, index) => `
${index + 1}. ${task.title}
   Description: ${task.description || "No description provided"}
   Created: ${format(task.createdAt, "MMM dd, yyyy")}
   Completed: ${format(task.updatedAt, "MMM dd, yyyy")}
   Status: Completed
`
        )
        .join("\n")
    : "No completed tasks"
}

---
Report generated by Task Management Dashboard
    `.trim();
  };

  const downloadReport = async () => {
    if (tasks.length === 0) {
      setStatus("error");
      setTimeout(() => setStatus(null), 3000);
      return;
    }

    setIsGenerating(true);
    setStatus(null);

    try {
      // Simulate PDF generation delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      const content = generatePDFContent();
      const blob = new Blob([content], { type: "text/plain" });
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.download = `task-report-${format(
        new Date(),
        "yyyy-MM-dd-HHmm"
      )}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      setStatus("success");
      setTimeout(() => setStatus(null), 3000);
    } catch (error) {
      setStatus(`error`);
      console.error(error);
      setTimeout(() => setStatus(null), 3000);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="max-w-2xl">
      {status === "success" && (
        <Alert className="mb-6 border-green-200 bg-green-50">
          <CheckCircle2 className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            Report downloaded successfully!
          </AlertDescription>
        </Alert>
      )}

      {status === "error" && (
        <Alert className="mb-6 border-red-200 bg-red-50">
          <AlertCircle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            {tasks.length === 0
              ? "No tasks available to generate report. Please create some tasks first."
              : "Failed to generate report. Please try again."}
          </AlertDescription>
        </Alert>
      )}

      <div className="space-y-6">
        <div className="flex items-start gap-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <FileText className="w-6 h-6 text-blue-600 mt-1" />
          <div>
            <h3 className="font-medium text-blue-900 mb-2">Task Report</h3>
            <p className="text-sm text-blue-700 mb-4">
              Generate a comprehensive report containing all your tasks with
              their completion status, creation dates, and descriptions. The
              report includes a summary with statistics and is organized by task
              status.
            </p>
            <div className="text-sm text-blue-600">
              <p>• Total tasks: {tasks.length}</p>
              <p>• Completed: {tasks.filter((t) => t.completed).length}</p>
              <p>• Pending: {tasks.filter((t) => !t.completed).length}</p>
            </div>
          </div>
        </div>

        <Button
          onClick={downloadReport}
          disabled={isGenerating}
          size="lg"
          className="w-full sm:w-auto flex items-center gap-2 bg-background cursor-pointer hover:bg-background/70">
          {isGenerating ? (
            <>
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              Generating Report...
            </>
          ) : (
            <>
              <Download className="w-4 h-4" />
              Download Report
            </>
          )}
        </Button>
      </div>
    </div>
  );
}
